<snippet>
	<content><![CDATA[
vector<bool> is_prime(N+1, true);

// O(Nlog(N))
void divisors() {
    vector<vector<int>> d(N+1);
    for(int i = 1; i <= N; i++) {
        for(int j = i; j <= N; j+=i) {
            d[j].push_back(i);
        }
    }
}
// O(sqrt(N))
vector<ll> divisor(ll a) {
    vector<ll> divisors;
    for (ll i = 1; i*i <= a; ++i) {
        if(a % i == 0) {
            if(a / i == i)divisors.push_back(i);
            else {
                divisors.push_back(i);
                divisors.push_back(a/i);
            }
        }
    }
    return divisors;
}
// O(Nlog(log(N)))
void sieve() {
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= N; i++) {
        if (is_prime[i]) {
            for (int j = i * i; j <= N; j += i)
                is_prime[j] = false;
        }
    }
}
// O(sqrt(N))
vector<ll> prime_factorization(ll n) {
    vector<ll> factorization;
    while (n % 2 == 0) {
        factorization.push_back(2);
        n /= 2;
    }
    for (ll d = 3; d * d <= n; d += 2) {
        while (n % d == 0) {
            factorization.push_back(d);
            n /= d;
        }
    }
    if (n > 1) factorization.push_back(n);
    return factorization;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SIEVE</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
